<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言基本知识结构</title>
    <url>/2022/05/30/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="C语言基本知识结构">C语言基本知识结构</h2>
<h3 id="C语言基本概念">C语言基本概念</h3>
<ol>
<li>
<p>一个C语言程序由源代码到可执行文件的流程：预处理-&gt;编译-&gt;汇编-&gt;链接</p>
</li>
<li>
<p>C语言标识符命名规则：</p>
<p>（1） 字母或下划线开头，后面可以跟字母、下划线、数字，其他字符不允许</p>
<p>（2）大小写敏感区分</p>
</li>
<li>
<p>.多个变量定义：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">float</span> m = <span class="number">10.9</span>, n = <span class="number">20.56</span>;</span><br><span class="line"><span class="keyword">char</span> p, q = <span class="string">&#x27;@&#x27;</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>数据类型长度：（常见）</p>
<table>
<thead>
<tr>
<th>声明</th>
<th>32位机器</th>
<th>64位机器</th>
</tr>
</thead>
<tbody>
<tr>
<td>char</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>int</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>char*</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td>float</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>double</td>
<td>8</td>
<td>8</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>科学计数法命名规则：</p>
<p>形如 或 的常量是使用了科学计数法的常量。例如：3.5e2 = 350，代表 3.5 X 10**2</p>
<p>命名规则：</p>
<p>（1） 必须是十进制数（特别的 是代表 ）</p>
<p>（2） 必须是一个整数，例如这个不合法：3.5e2.1</p>
</li>
<li>
<p>常见格式化说明符：</p>
<p>%d 十进制有符号整数</p>
<p>%u 十进制无符号整数</p>
<p>%f 浮点数</p>
<p>%s 字符串（以\0作为结尾判断）【注意scanf读入字符串时如果检测到空格或回车，读入结束，因此有 可能会产生截断问题】</p>
<p>%c 单个字符</p>
<p>%p 指针的值</p>
<p>%e 指数形式的浮点数</p>
<p>%% 打印百分号</p>
<p>%x, %X 无符号以十六进制表示的整数（x使用时输出小写，X则为大写）</p>
</li>
<li>
<p>运算符优先级</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.bmp.ovh/imgs/2021/11/78bf524737aa6b82.png"
                      alt="image-20211130195018822"
                ></p>
</li>
</ol>
<h3 id="自增和自减-以自增为例">自增和自减(以自增为例)</h3>
<ol>
<li>
<p>++x和x++分别代表先自增再用x和先用x再自增。</p>
</li>
<li>
<p>考虑：</p>
<p>（1） a1 = ++a 代表先加自增a，然后使用自增后的a赋值到a1上。</p>
<p>（2） b1 = a++ 代表先把a赋值到b1上，然后令a自增。</p>
</li>
</ol>
<h3 id="流程控制">流程控制</h3>
<ol>
<li>
<p>if的基本形态：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件)&#123;</span><br><span class="line">    语句块<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    语句块<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>复杂形态：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件<span class="number">1</span>)&#123;</span><br><span class="line">    语句块<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(判断条件<span class="number">2</span>)&#123;</span><br><span class="line">    语句块<span class="number">2</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    语句块<span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>逻辑运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>结合性</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;&amp;</td>
<td>与运算，双目，对应数学中的 “且”</td>
<td>左结合</td>
<td>1&amp;&amp;0、(9&gt;3)&amp;&amp;(b&gt;a)</td>
</tr>
<tr>
<td>||</td>
<td>或运算，双目，对应数学中的 “或”</td>
<td>左结合</td>
<td>1||0、(9&gt;3)||(b&gt;a)</td>
</tr>
<tr>
<td>!</td>
<td>非运算，单目，对应数学中的 “非”</td>
<td>右结合</td>
<td>!a、!(2&lt;5)</td>
</tr>
</tbody>
</table>
<p>&amp;&amp;和||的短路性：如果&amp;&amp;的左表达式已经为假，则右表达式不会进行。如果||的左表达式已经为真， 则右表达式不会进行。</p>
<p>运算符优先级：赋值运算符(=) &lt; &amp;&amp;和|| &lt; 关系运算符 &lt; 算术运算符 &lt; 非(!)</p>
</li>
<li>
<p>switch-case：</p>
<p>基本形态：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 整型数值<span class="number">1</span>: 语句 <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> 整型数值<span class="number">2</span>: 语句 <span class="number">2</span>;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">case</span> 整型数值n: 语句 n;</span><br><span class="line">    <span class="keyword">default</span>: 语句 n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>break 跳出 switch 语句时，不再执行 switch 中的任何语句，包括当前分支中的剩余语句和其他分支中 的语句。</p>
</li>
<li>
<p>三目运算符逻辑判断</p>
<p>形态：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">表达式<span class="number">1</span> ? 表达式<span class="number">2</span> : 表达式<span class="number">3</span> 。例如： max = (a&gt;b) ? a : b;</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h3 id="循环控制">循环控制</h3>
<ol>
<li>
<p>while循环：</p>
<p>形态：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(表达式)&#123;</span><br><span class="line">    语句块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>当表达式成立时，执行语句块，执行完毕后，继续判断表达式，直到表达式不成立时，跳出循环</p>
</li>
<li>
<p>do-while循环：</p>
<p>形态：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    语句块</span><br><span class="line">&#125;<span class="keyword">while</span>(表达式); <span class="comment">//注意这个分号</span></span><br></pre></td></tr></table></figure></div>
<p>先执行一次语句块，然后判断表达式是否成立，如果成立则继续执行语句块-&gt;判断表达式…直到表达式 不成立。</p>
</li>
<li>
<p>for循环：</p>
<p>（1）基本形态：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>; 表达式<span class="number">2</span>; 表达式<span class="number">3</span>)&#123;</span><br><span class="line">    语句块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>表达式1仅执行一次，即在进入for循环时先执行表达式1，之后不再执行。</p>
<p>表达式2每轮循环开始时会进行判定，如果不成立，则for循环跳出，反之继续执行循环</p>
<p>表达式3表示每轮循环结束后，会执行的表达式。 我们一般常用的语句如下：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句; 循环条件; 自增或自减)&#123;</span><br><span class="line">    语句块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>（2）for循环的三个表达式均为可选项，可以不写，但是分号必须保留。在全部舍去的情况下，式子变 成了：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;) <span class="comment">//相当于while(1)</span></span><br></pre></td></tr></table></figure></div>
<p>（3）continue：continue用于跳出当前层循环，然后继续下一轮循环，但是要注意，continue完后， 会执行表达式3</p>
<p>（4）break：break用于结束循环。</p>
<h3 id="数组">数组</h3>
<ol>
<li>
<p>一维数组的定义：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">数据类型 数组名[整数常量];</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];</span><br></pre></td></tr></table></figure></div>
<p>例如： int arr[10] ，表示分配10个int的类型的内存空间，即40个字节的空间，并起了个名字叫做arr</p>
</li>
<li>
<p>数组下标从0开始，在实际写代码过程中，如果下标0是非必须，我们可以从1开始存数据。但是要注意 申请的数组大小要足够，可以稍微申请得多一点，例如存1000个数据，可以申请1005个数据储存空间。</p>
</li>
<li>
<p>一维数组初始化：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>] = &#123;<span class="number">20</span>, <span class="number">345</span>, <span class="number">700</span>, <span class="number">22</span>&#125;;</span><br></pre></td></tr></table></figure></div>
<p>上面式子初始化了这4个元素，由 {} 包围，逗号隔开。</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">12</span>, <span class="number">19</span>, <span class="number">22</span> , <span class="number">993</span>, <span class="number">344</span>&#125;;</span><br></pre></td></tr></table></figure></div>
<p>注意的是，如果初始化的元素个数（本例为5个）少于实际申请的元素个数（即10个）时，只给前面的 元素赋值，后面自动化初始为0。</p>
<p>可以通过下面的形式将数组的所有元素初始化为 0：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure></div>
<p>如果给全部元素赋值，那么在定义数组时可以不给出数组长度：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>二维数组的定义：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">数据类型 数组名[整数常量<span class="number">1</span>][整数常量<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>二维数组的初始化：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">3</span>]=&#123; &#123;<span class="number">80</span>,<span class="number">75</span>,<span class="number">92</span>&#125;, &#123;<span class="number">61</span>,<span class="number">65</span>,<span class="number">71</span>&#125;, &#123;<span class="number">59</span>,<span class="number">63</span>,<span class="number">70</span>&#125;, &#123;<span class="number">85</span>,<span class="number">87</span>,<span class="number">90</span>&#125;, &#123;<span class="number">76</span>,<span class="number">77</span>,<span class="number">85</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">3</span>]=&#123;<span class="number">80</span>, <span class="number">75</span>, <span class="number">92</span>, <span class="number">61</span>, <span class="number">65</span>, <span class="number">71</span>, <span class="number">59</span>, <span class="number">63</span>, <span class="number">70</span>, <span class="number">85</span>, <span class="number">87</span>, <span class="number">90</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">85</span>&#125;; <span class="comment">//与上</span></span><br><span class="line">面等价</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">3</span>]=&#123;</span><br><span class="line">&#123;<span class="number">80</span>,<span class="number">75</span>,<span class="number">92</span>&#125;,</span><br><span class="line">&#123;<span class="number">61</span>,<span class="number">65</span>,<span class="number">71</span>&#125;,</span><br><span class="line">&#123;<span class="number">59</span>,<span class="number">63</span>,<span class="number">70</span>&#125;,</span><br><span class="line">&#123;<span class="number">85</span>,<span class="number">87</span>,<span class="number">90</span>&#125;,</span><br><span class="line">&#123;<span class="number">76</span>,<span class="number">77</span>,<span class="number">85</span>&#125;</span><br><span class="line">&#125;;<span class="comment">// 等价</span></span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">3</span>]=&#123;</span><br><span class="line">&#123;<span class="number">80</span>,<span class="number">75</span>,<span class="number">92</span>&#125;,</span><br><span class="line">&#123;<span class="number">61</span>,<span class="number">65</span>,<span class="number">71</span>&#125;,</span><br><span class="line">&#123;<span class="number">59</span>,<span class="number">63</span>,<span class="number">70</span>&#125;,</span><br><span class="line">&#123;<span class="number">85</span>,<span class="number">87</span>,<span class="number">90</span>&#125;,</span><br><span class="line">&#123;<span class="number">76</span>,<span class="number">77</span>,<span class="number">85</span>&#125;</span><br><span class="line">&#125;;<span class="comment">// 当对所有元素赋值时，可以不给出第一个常量</span></span><br></pre></td></tr></table></figure></div>
<p>可以只对部分元素赋值，未赋值的元素自动取默认值：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>&#125;, &#123;<span class="number">3</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">3</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></div>
</li>
</ol>
</li>
</ol>
<h3 id="函数">函数</h3>
<ol>
<li>
<p>基本形态：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名(参数列表) &#123;</span><br><span class="line">   <span class="comment">//... do something</span></span><br><span class="line">   <span class="keyword">return</span> ?;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>无返回值函数（即返回值类型为void）可以不在函数体里加return</p>
</li>
<li>
<p>参数列表：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">(参数<span class="number">1</span>类型 参数<span class="number">1</span>名字,参数<span class="number">2</span>类型 参数<span class="number">2</span>名字,...);</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>形参：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>;</span><br></pre></td></tr></table></figure></div>
<p>例如上述 和 就是函数的形参，形参只是起到接收外部调用该函数时传入的值，对形参进行任意的修 改都不会影响其外部。</p>
<p>但若传入的是指针，则我们对指针所指向的内容进行修改，才是实际的修改。</p>
</li>
<li>
<p>return语句：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> 表达式;</span><br></pre></td></tr></table></figure></div>
<p>return 不仅可以返回值，还可以强制打断函数的执行流程，直接返回值然后结束。例如在void类型的函 数中， return; 就起到如此的作用</p>
</li>
<li>
<p>使用变量的就近原则：</p>
<p>考虑一个代码段：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;<span class="comment">//全局变量</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">haha</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">haha(<span class="number">4</span>);</span><br></pre></td></tr></table></figure></div>
<p>在使用时，函数都就近原则使用变量。</p>
</li>
</ol>
<h3 id="指针">指针</h3>
<ol>
<li>
<p>基本定义：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">数据类型 *名字;</span><br><span class="line"><span class="keyword">int</span> *p;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>指针的值是一个地址，例如：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> *p_a = &amp;a;</span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"><span class="keyword">int</span> *p_b;</span><br><span class="line">p_b = &amp;a;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>注意在一行上面的指针定义：</p>
<p>考虑：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *a, b, c;</span><br></pre></td></tr></table></figure></div>
<p>仅有a是int指针，其他为int普通变量。所以有结论，*a是一个整体。</p>
</li>
<li>
<p>获取指针所指向的数据：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d, %d\n&quot;</span>, a, *p); <span class="comment">// 15 15</span></span><br></pre></td></tr></table></figure></div>
<p>其中printf里的 <em>p 代表的就是获取p所指向的数据。（此时的</em>p很像某个“int类型的变量”）</p>
</li>
<li>
<p>修改指针所指向的数据：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;a;</span><br><span class="line">*p = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d, %d\n&quot;</span>, a, *p); <span class="comment">// 5 5</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>注意：定义时的 *p 和使用的时候的 *p 是截然不同的。</p>
</li>
<li>
<p>数据的自增自减运算：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;a;</span><br><span class="line">*p++; <span class="comment">// equals to *(p++) 优先级问题噢~</span></span><br><span class="line">*--p; <span class="comment">// equals to *(--p)</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>指针的运算：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[]= &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p = a;</span><br><span class="line">p++;</span><br></pre></td></tr></table></figure></div>
<p>指针的加减实际上和他的类型长度有关， p++ 后，p指向的是3。</p>
<p>考虑：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[]= &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> *p = a;</span><br><span class="line">p+=<span class="number">8</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*p);</span><br></pre></td></tr></table></figure></div>
<p>答案会是什么？</p>
</li>
</ol>
<h3 id="如果还有更多时间…">如果还有更多时间…</h3>
]]></content>
  </entry>
  <entry>
    <title>随笔</title>
    <url>/2022/06/21/2022%E5%B9%B4%E5%A4%8F%E9%A9%AC%E5%8E%9F%E6%9C%9F%E6%9C%AB%E8%8C%83%E5%9B%B4/</url>
    <content><![CDATA[<h2 id="马原期末范围"><a href="#马原期末范围" class="headerlink" title="马原期末范围"></a>马原期末范围</h2><h3 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h3><blockquote>
<p><strong>论述题30分（二选一）</strong> 保证要点(书上原话)，适当展开阐述(书上原话为宜)</p>
<p><strong>简答题40分（四道题）</strong>要求稍作解释(1-2句话)，不能只答要点</p>
<p><strong>材料题30分 （一道题）</strong>参考论述题，同时结合材料</p>
<p><strong>页码参考《马克思主义原理》(2021版)</strong></p>
</blockquote>
<h3 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h3><blockquote>
<h4 id="P2-4-什么是马克思主义"><a href="#P2-4-什么是马克思主义" class="headerlink" title="P2-4 什么是马克思主义"></a>P2-4 什么是马克思主义</h4><p>马克思主义是由马克思和恩格斯创立并为后继者所不断发展的科学理论体系，是关于自然、社会和人类思维发展一般规律的学说，是关于社会主义必然代替资本主义、最终实现共产主义的学说，是关于无产 阶级解放、全人类解放和每个人自由而全面发展的学说，是无产阶级政党和社会主义国家的指导思想， 是指引人民创造美好生活的行动指南。</p>
<p>马克思主义是一个博大精深的理论体系 马克思主义哲学、马克思主义政治经济学和科学社会主义是其三个基本组成部分，它们有机统一并共同构成了马克思主义理论的主体内容 。</p>
</blockquote>
<h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><blockquote>
<blockquote>
<h4 id="P22-24-哲学的物质范畴"><a href="#P22-24-哲学的物质范畴" class="headerlink" title="P22-24 哲学的物质范畴"></a>P22-24 哲学的物质范畴</h4><p>世界是物质的世界，对物质的正确理解是我们认识和把握世界本质和 规律的前提一切唯物主义哲学都是从这一前提出发，把物质范畴作为自己的理论基石 。</p>
<p>物质是标志客观实在的哲学范畴，这种客观实在是人通过感觉感知的，它不依赖于我们的感觉而存在，为我们的感觉所复写、摄影、反映。</p>
<p><strong>第一，坚待了唯物主义一元论，同唯心主义一元论和二元论划清了界限。</strong></p>
<p>马克思主义是从物质与意识的对立统一关系中把握和规定物质的，物 质最本质的规定是客观实在性，这就指明了物质对于意识的独立性、根源 性，以及意识对千物质的依赖性、派生性 因为意识不过是物质的反映， 不能离开物质而独立存在，所以意识不可能成为世界的另一种本原。</p>
<p><strong>第二，坚持了能动的反映论和可知论，批判了不可知论。</strong></p>
<p>物质这一客观实在是可以被认识的对象，由千科学技术条件的限制，目前世界上还有很多事物未被人类认识，但这并不意味着它们不可认识 未知世界与已知世界都是客观存在的，随着实践和科学的发展，人们对未知世界的认识将 会不断扩展和深化世界上只有尚未认识之物，没有不可认识之物。</p>
<p><strong>第三，体现了唯物论和辩证法的统一，克服了形而上学唯物主义的缺陷。</strong></p>
<p>马克思主义的物质观认为，客观实在性是物质的唯一特性，既肯定了哲学物质范畴同自然科学物质结构理论的联系，又把它们区别开来 从个性中看到共性，从相对中找到绝对，从暂时中发现永恒，这是马克思主义 物质观体现的唯物辩证法。</p>
<p><strong>第四，体现了唯物主义自然观与唯物主义历史观的统一，为彻底的唯物主义奠定了理论基础。</strong></p>
<p>马克思主义的物质观揭示了自然和社会的物质性， 建立了统一说明自然历史过程的唯物主义原则，实现了唯物主义自然观和 历史观的辩证统一。</p>
</blockquote>
<blockquote>
<h4 id="P35-36-矛盾的同一性和斗争性及其在事物发展中的作用"><a href="#P35-36-矛盾的同一性和斗争性及其在事物发展中的作用" class="headerlink" title="P35-36 矛盾的同一性和斗争性及其在事物发展中的作用"></a>P35-36 矛盾的同一性和斗争性及其在事物发展中的作用</h4><p>矛盾是反映事物内部和事物之间对立统一关系的哲学范畴，同一性和斗争性是矛盾的基本属性。</p>
<p><strong>矛盾的同一性是指矛盾着的对立面相互依存 相互贯通的性质和趋势，</strong> 有两个方面的含义：</p>
<ul>
<li>一是矛盾着的对立面相互依存，互为存在的前提，并共处于一个统一体中；</li>
<li>二是矛盾着的对立面相互贯通，在一定条件下可以相互转化。</li>
</ul>
<p><strong>矛盾的斗争性是矛盾着的对立面相互排斥、相互分离的性质和趋势。</strong>由于矛盾的性质不同，矛盾的斗争形式也不同，对于多种多样的斗争形式，可以分为对抗性矛盾和非对抗性矛盾两种基本形试。</p>
<p>矛盾的同一性和斗争性在事物发展中具有重要作用。</p>
<p><strong>矛盾的同一性在事物发展中的作用表现在：</strong></p>
<ul>
<li>第一，同一性是事物存在和发展的前提，在矛盾双方中，一方的发展以另一方的发展为条件，发展是在矛盾统一体中的发展；</li>
<li>第二，同一性使矛盾双方相互吸取有利千自身的因素，在相互作用中各自得到发展； </li>
<li>第三，同一性规定着事物转化的可能和发展的趋势。</li>
</ul>
<p><strong>矛盾的斗争性在事物发展中的作用表现在：</strong></p>
<ul>
<li>第一，矛盾双方的斗争促进矛盾双方力最的变化，造成双方力量发展的不平衡，为对立面的转化、事物的质变创造条件； </li>
<li>第二，矛盾双方的斗争是一种矛盾统一体向另一种矛盾统一 体过渡的决定性力量。</li>
</ul>
<p>矛盾同一性和斗争性的辩证关系原理， 要求我们在观察和处理问题时，必须善千把两者结合起来，在斗争性中把握同一性，在同一性中把握斗争性。</p>
</blockquote>
<blockquote>
<h4 id="P38-39-否定之否定规律"><a href="#P38-39-否定之否定规律" class="headerlink" title="P38-39 否定之否定规律"></a>P38-39 否定之否定规律</h4><p>事物的发展是通过其内在矛盾运动以自我否定的方式而实现的。否定之否定规律就是要揭示事物自已发展自己的完整过程及本质。</p>
<p>事物内部都存在肯定因素和否定因素 肯定因素是维持现存事物存在的因素，否定因素是促使现存事物灭亡的因素。</p>
<p><strong>唯物辩证法的否定观科学揭示了否定的深刻内涵 ：</strong></p>
<ul>
<li>第一，否定是事物的自我否定、自我发展，是事物内部矛盾运动的结果；</li>
<li>第二，否定是事物发展的环节，是旧事物向新事 物的转变，是从旧质到新质的飞跃只有经过否定，旧事物才能向新事物转变；</li>
<li>第三，否定是新旧事物联系的环节，新事物孕育产生于旧事物，新旧事物是通过否定环节联系起来的；</li>
<li>第四，辩证否定的实质是“扬弃”, 即新事物对旧事物既批判又继承，既克服其消极因素又保留其积极因。</li>
</ul>
<p>事物的辩证否定不是一次完成的，而是要经历事物自我发展的两次否定、三个阶段即“肯定一否定一否定 之否定”的有规律过程。第一次否定使矛盾得到初步解决，而处于否定阶段的事物仍然具有片面性，还要经过再次否定，即否定之否定，实现对立面的统一，使矛盾得到根本解决。其中，否定之否定阶段仿佛 是向原来出发点的“回复”，但这是在更高阶段的“回复”。事物的发展呈现出周期性，不同周期的交替使事物的发展呈现出波浪式前进或螺旋式上升的总趋势。</p>
</blockquote>
</blockquote>
<h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><blockquote>
<blockquote>
<h4 id="P72-75-从实践到认识"><a href="#P72-75-从实践到认识" class="headerlink" title="P72-75 从实践到认识"></a>P72-75 从实践到认识</h4><p>人们认识定事物的过程，是一个从实践到认识，再从认识到实践的过程。</p>
<p><strong>感性认识</strong>是人们在实践基础上，由感觉器官直接感受到的关于事物的现象、事物的外部联系、事物的各 个方面的认识。感性认识具有不深刻的局限性，必须进一步上升到理性认识。 <strong>理性认识</strong>是指人们借助抽象思维，在概括整理大量感性材料的基础上，达到关于事物的本质、全体、内部联系和事物自身规律性的认识。从概念到判断再到推理，是理性认识由低级到高级的发展。</p>
<p><strong>感性认识和理性认识的性质虽然不同，但二者的关系是辩证统一的：</strong></p>
<ul>
<li><strong>第一，理性认识依赖于感性认识。</strong>感性认识是认识过程的起点，是达到理性认识的必经阶段，没有感性认识，就没有理性认识 。理性认识对感性认识的 这种依赖关系，是认识对实践依赖关系的重要表现。</li>
<li><strong>第二，感性认识有待于发展和深化为理性认识。</strong>感性认识是认识的初级阶段，是对事物外部联系的认识，还不能达到对事物的本质和规律的认识，因而还不是完全的认识。</li>
<li><strong>第三，感性认识和理性认识相互渗透、相互包含。</strong>一方面，感性中有理性，人的感觉是渗透着理性的感觉；另一方面，理性中有感性，理性不仅以感性材料为基础，而且也以文字符号等感性形式的语言作为表达手段。</li>
</ul>
<p>从感性认识上升到理性认识，必须具备两个基本条件：第一，投身实践，深入调查，获取十分丰富和合乎实际的感性材料这是实现由感性认 识上升到理性认识的基础第二，经过思考的作用，运用理论思维和科学抽象，将丰富的感性材料加以去粗取精去伪存真、由此及彼、由表及里的处理加工，形成概念和理论的系统。</p>
</blockquote>
<blockquote>
<h4 id="P95-97-真理与价值在实践中的辩证统一"><a href="#P95-97-真理与价值在实践中的辩证统一" class="headerlink" title="P95-97 真理与价值在实践中的辩证统一"></a>P95-97 真理与价值在实践中的辩证统一</h4><p>人们的实践活动总是受着真理尺度和价值尺度的制约。</p>
<h5 id="辩证"><a href="#辩证" class="headerlink" title="辩证"></a>辩证</h5><ul>
<li><strong>一方面，价值尺度必须以真理为前提。</strong>要想达到实践的目的以满足人类自身的需要，就必须“认识真理，掌握真理，信仰真理，捍卫真理”。脱离了真理尺度，价值尺度就偏离了合理的、正确的轨道。 </li>
<li><strong>另一方面，人类自身需要的内在尺度，推动着人们不断发现新的真理。</strong>科学发明、技术创新、经典思想理论的形成，都是人类为了实现更美好的生活而进行的社会实践。脱离了价值尺度，真理就缺失了主体意义。 </li>
</ul>
<h5 id="统一"><a href="#统一" class="headerlink" title="统一"></a>统一</h5><p>基千实践的具体性和历史性，真理尺度与价值尺度的统一也是具体的、历史的。二者的统一会随着实践的发展而不断发展到更高级的程度，真理由相对向绝对转化，人的需要和利益也 日益多元。真理尺度与价值尺度是否达到了具体的、历史的统一，必须通过实践来验证。</p>
<p>新时代中国特色社会主义的伟大实践，充分体现了真理尺度与价值尺度的辩证统一。</p>
</blockquote>
</blockquote>
<h3 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h3><blockquote>
<blockquote>
<h4 id="P118-120-社会存在和社会意识辩证关系原理的重要意义"><a href="#P118-120-社会存在和社会意识辩证关系原理的重要意义" class="headerlink" title="P118-120 社会存在和社会意识辩证关系原理的重要意义"></a>P118-120 社会存在和社会意识辩证关系原理的重要意义</h4><p>社会存在和社会意识辩证关系原理对千我们树立科学历史观正确认识社会历史具有重要意义。社会存在和社会意识辩证关系原理对于社会发展包括社会文化建设具有重要指导意义 。</p>
<p><strong>文化是社会意识的重要组成部分。文化对社会发展的重要作用主要表现在：</strong> </p>
<ul>
<li><strong>第一，文化为社会发展提供思想保证。</strong>作为一定经济、政治的反映， 文化必然发挥维护或批判现实社会的功能，并影响社会发展的方向先进文化为社会发展指明变革方向并能够保证社会沿着正确方向前进。</li>
<li><strong>第二，文化为社会发展提供精神动力。</strong>中国特色社会主义文化是凝聚和激励全国各族人民的重要力量。</li>
<li><strong>第三、文化为社会发展提供智力支持。</strong>文化体现着人类认识世界的成果，并对人们改造世界的活动具有智力支持作用不论是自然科学还是哲学社会科学，都是人类的科学文化成果，都有助于提高劳动者的素质理水平和创新能力，从而促进生产力发展和社会全面进步。</li>
<li><strong>第四，文化为社会发展提供凝聚力量。</strong>文化的核心是价值观。文化通过它在社会中占主导地位的价值导向和规范体系，教化社会成员，规范人们行为，增进社会认同，凝聚社会共识，促进民族意识和民族精神的形成。</li>
</ul>
<p>哲学社会科学是文化的重要组成部分，其发展水平反映了一个民族的 思维能力、精神品格、文明素质，体现了一个国家的综合国力和国际竞争力。哲学社会科学的发展水平和繁荣程度，是一个民族综合素质和国家文化软实力的重要体现和突出标志 。</p>
</blockquote>
<blockquote>
<h4 id="P156-158-人民群众在创造历史过程中的决定作用"><a href="#P156-158-人民群众在创造历史过程中的决定作用" class="headerlink" title="P156-158 人民群众在创造历史过程中的决定作用"></a>P156-158 人民群众在创造历史过程中的决定作用</h4><p>人民群众是社会历史的主体，是历史的创造者这是马克思主义最基本的观点之一。</p>
<ul>
<li>从质上看，人民群众是指一切对社会历史发展起推动作用的人；</li>
<li>从量上看，人民群众是指社会人口中的绝大多数。</li>
</ul>
<p>在社会历史发展过程中，人民群众起着决定性的作用人民群众是社会历史实践的主体，在创造历史中起决定性的作用人民群众创造历史的作用是同社会基本矛盾运动推动社会前进的过程相一致的。在社会基本矛盾的解决过程中，人民群众是顺应生产力发展要求的社会力量，是具有变革旧的生产关系愿望的社会力量，是主张变革旧的社会制度和旧的思想观 念的社会力量 人民群众的总体意愿和行动代表了历史发展的方向，人民 群众的社会实践最终决定历史发展的结局。</p>
<ul>
<li><strong>人民群众是社会物质财富的创造者。</strong>人类社会赖以存在和发展的基础是物质资料的生产方式 广大的劳动群众是物质资料生产活动的主体，创造了人们吃穿住行等必需的生活资料以及从事政治、科学、文化艺术等活 动所必需的物质前提。</li>
<li><strong>人民群众是社会精神财富的创造者。</strong>物质生产活动的主体是人民群众，精神生产活动的主体也是人民群众人民群众通过物质生产实践为创造精神财富提供了必要的物质条件和设施 人民群众的生活、实践活动是一切精神财富、精神产品形成和发展的源泉。</li>
<li><strong>人民群众是社会变革的决定力量。</strong>人民群众在创造社会财富的同时， 也创造并改造着社会关系 生产关系的变革，社会制度的更替，最终取决于生产力的发展，但不会随着生产力的发展自发地实现和完成，而必须借助人民群众的力量。</li>
<li><strong>人民群众创造历史的活动受到一定社会历史条件的制约。</strong>经济条件对于人民群众创造历史的活动有着首要的、决定性的影响一定历史阶段所达到的生产力水平是人民群众创造历史的物质基础和前提。精神文化条件也是制约人民群众创造历史活动的重要因素 一定历史时期的人们总是自觉或不自觉地受着一定社会的思想文化传统和意识形态的影响。</li>
</ul>
<p>我国的社会主义制度为人民群众创造历史的活动提供了极为有利的经济、政治和文化等方面的条件，但也存在有待完善和改进的方面。坚持以人民为中心的思想，站在时代和历史的高度，总结和概括了人民群众在中国特色社会主义实践中的伟大创造作用和主体地位，充分反映和顺应了人民群众的根本利益诉求，深刻阐明了中国共产党作为执政党的历史使命，进一步明确了实现人民对美好生活向往的奋斗目标。</p>
</blockquote>
</blockquote>
<h3 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h3><blockquote>
<blockquote>
<h4 id="P169-171-商品的二因素和生产商品的劳动的二重性"><a href="#P169-171-商品的二因素和生产商品的劳动的二重性" class="headerlink" title="P169-171 商品的二因素和生产商品的劳动的二重性"></a>P169-171 商品的二因素和生产商品的劳动的二重性</h4><p>商品是用来交换、能满足人的某种需要的劳动产品，具有使用价值和价值两个因素或两种属性，是使用价值和价值的矛盾统一体。使用价值是指商品能满足人的某种需要的有用性，反映的是人与自然之间的物质关系， 是商品的自然属性，是一切劳动产品所共有的属性，离开了它商品就不复存在使用价值构成社会财富的物质内容。</p>
<p>使用价值是交换价值的物质承担者交换价值首先表现为一种使用价值同另一种使用价值相交换的最的关系或比例决定商品交换的比例的不是商品的使用价值，而是价值价值是凝结在商品中的无差别的一般人类劳动，即人的脑力和体力的耗费价值是商品所特有的社会属性任何有用物品都具有使用价值，但只有这种有用物品是劳动产品并作为为商品时才具有价值。</p>
<p>价值是交换价值的基础，交换价值是价值的表现形式。</p>
<p><strong>商品的使用价值和价值之间是对立统一的关系：</strong></p>
<ul>
<li><strong>其对立性表现在：</strong>商品的使用价值和价值是相互排斥的，二者不可兼得。要获得商品的价值， 就必须放弃商品的使用价值；要得到商品的使用价值，就不能得到商品的价值商品生产者生产商品并不是为了取得使用价值，而是为了取得价值， 只是为了取得价值，才关心使用价值 商品生产者只有将商品的使用价值 让渡给商品购买者，才能取得价值：</li>
<li><strong>其统一性表现在：</strong>作为商品，必须同时具有使用价值和价值两个因素使用价值是价值的物质承担者，价值寓于使用价值之中一种物品如果没有使用价值，就是无用之物，即使人们为它付出了大量的劳动，也没有价值。</li>
</ul>
<p><strong>商品是劳动产品，生产商品的劳动具有二重性，即具体劳动和抽象劳动。</strong>具体劳动是指生产一定使用价值的具体形式的劳动。</p>
<p>任何一种生产商品的劳动，一方面是特殊的具体劳动，另一方面又是一般的抽象劳动，这就是劳动的二重性。<strong>正是劳动的二重性决定了商品的二因素。</strong></p>
<p>具体劳动和抽象劳动也是对立统一的关系：</p>
<ul>
<li><strong>一方面，</strong>具体劳动和抽象 劳动不是各自独立存在的两种劳动或两次劳动，它们在时间上和空间上是 统一的，是商品生产者的同一劳动过程不可分割的两个方面；</li>
<li><strong>另一方面，</strong> 具体劳动与抽象劳动又分别反映劳动的不同属性，具体劳动所反映的是人 与自然的关系，是劳动的自然属性，而抽象劳动所反映的是商品生产者的 社会关系，是劳动的社会属性。</li>
</ul>
</blockquote>
<blockquote>
<h4 id="P173-175-价值规律及其作用"><a href="#P173-175-价值规律及其作用" class="headerlink" title="P173-175 价值规律及其作用"></a>P173-175 价值规律及其作用</h4><p>第一点，价值规律是商品生产和商品交换的基本规律。这一规律的主要内容和客观要求是：商品的价值量由生产商品的社会必要劳动时间决定，商品交换以价值量为基础，按照等价交换的原则进行。在商品经济中，价值规律的表现形式是，商品的价格围绕商品的价值自发波动。 </p>
<p>第二点，价值规律在市场配置资源过程中的作用表现在： </p>
<p><strong>第一，自发地调节生产资料和劳动力在社会各生产部门之间的分配比例。</strong> 不论社会制度如何，为了进行生产和再生产，生产资料和劳动力在各个生产部门之间的分配都应该遵循一定的比例，否则就会造成某些部门发展过快，浪费社会资源；</p>
<p><strong>第二，自发地刺激社会生产力的发展。</strong>在商品经济条件下，商品是按照由社会必要劳动时间所决定的社会价值进行交换的。</p>
<p><strong>第三，自发地调节社会收入的分配。</strong> 在实际的生产活动中，生产同种商品的各个生产者，由于生产条件和技术水平不同，生产中实际耗费的劳动时间也不同。</p>
<p>第三点，价值规律在对经济活动进行自发调节时，也会造成一些消极的后果： </p>
<p><strong>其一，导致社会资源浪费。</strong> 价值规律自发调节社会资源在社会生产各个部 门的配置时，可能出现比例失调的情况，造成社会资源的浪费。</p>
<p><strong>其二，阻碍技术进步。</strong> 在市场竞争中，率先采用先进生产技术和经营管理办法，提高了劳动生产率的商品生产者，为了保持自己在竞争中的优势，往往会限 制技术的扩散，严守经营秘密。</p>
<p><strong>其三，导致收入两极分化。</strong>价值规律的自发调节作用可能使一部分具有有利生产条件的生产者积 累大量财富，而使另一部分生产条件较差的生产者蒙受损失甚至破产。</p>
</blockquote>
</blockquote>
<h3 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h3><blockquote>
<blockquote>
<h4 id="P237-239-经济全球化的影响"><a href="#P237-239-经济全球化的影响" class="headerlink" title="P237-239 经济全球化的影响"></a>P237-239 经济全球化的影响</h4><p>经济全球化的过程是生产社会化程度不断提高的过程。在经济全球化进程中，社会分工得以在更大的范围内进行，资金、技术等生产要素可以在国际社会流动和优化配置，由此带来巨大的分工利益，推动世界生产力的发展。 </p>
<p>经济全球化体现了社会化生产的要求，不仅发达国家从中受益，一些发展中国家在参与经济全球化进程中也得到了快速发展。 </p>
<p>积极作用主要表现在： </p>
<p><strong>第一，经济全球化为发展中国家提供先进技术和管理经验。</strong> 经济全球化使技术、管理等生产要素在全球范围内自由流动和优化配置，发展中国家可以利用这一机会引进先进技术和管理经 验，提升企业的竞争力，推动产业结构合理优化，缩短与发达国家的差距。</p>
<p><strong>第二，经济全球化为发展中国家提供更多的就业机会。</strong> 发展中国家在经济全球化的过程中通过吸引外资在本国投资，为本国创造更多就业条件，扩大劳动者就业，发挥发展中国家丰富的劳动力资源优势 。</p>
<p><strong>第三，经济全球化推动发展中国家国际贸易发展。</strong> 经济全球化推动了世界市场的深化扩张， 发展中国家可以利用不断扩大的国际市场解决国内产品销售问题，以对外 贸易拉动本国经济的发展 。</p>
<p><strong>第四，经济全球化促进发展中国家跨国公司的发展。</strong>发展中国家借助投资自由化和比较优势组建大型跨国公司，积极参与经济全球化进程，增强经济竞争力，以从中获取更大利益。 </p>
<p>经济全球化也是一把“双刃剑”，它在促进经济发展的同时也带来了一些负面影响： </p>
<p><strong>第一，发达国家与发展中国家在经济全球化过程中的地位和收益不平等、不平衡。</strong> 长期以来，发达资本主义国家主导经济全球化进程，主导制定贸易和竞争规则，进而控制一些国际组织，从而成为经济全球化的 主要受益者。</p>
<p><strong>第二，加剧了发展中国家资源短缺和环境污染。</strong> 在经济全球化进程中，发达国家由千产业链优化升级， 会把高污染高能耗产业向发展中国家转移，从而加剧发展中国家在经济增长 的同时出现资源短缺和环境污染。</p>
<p><strong>第三，一定程度上增加了经济风险。</strong>经济全球化加深了世界的经济联系和相互依赖，在有效的全球性经济协调机制没 有完全建立起来的情况下，世界上的某一国家或地区爆发的危机将会迅速传导至全球，增加全球经济发展的不稳定性和经济风险。 </p>
<p>改革开放以来，我国充分利用经济全球化带来的机遇，不断扩大对外开放，实现了我国同世界关系的历史性变革。中国是经济全球化的受益者，更是贡献者。中国在谋求自身发展受益千经济全球化的同时，也拉动了世界经济增长，为国际社会提供了公共产品，推动了全球治理的发展，对世界经济的发展作出了贡献。</p>
</blockquote>
<blockquote>
<h4 id="P253-256-资本主义为社会主义所代替的历史必然性"><a href="#P253-256-资本主义为社会主义所代替的历史必然性" class="headerlink" title="P253-256 资本主义为社会主义所代替的历史必然性"></a>P253-256 资本主义为社会主义所代替的历史必然性</h4><p>从人类社会发展的长河看，资本主义终究要被社会主义所取代，这是历史发展的基本趋势资本主义的内在矛盾决定了资本主义必然被社会主义所代替。</p>
<ul>
<li><strong>第一，资本主义基本矛盾“包含着现代的一切冲突的萌芽“ 。</strong>资本主义生产方式越是占统治地位，越是发展， “社会化生产和资本主义占有的不相容性，也必然越加鲜明地表现出来“ 。资本主义基本矛盾表现在阶级关系上，资本主义基本矛盾表现在生产上；资本主义经济危机的爆发正是这个基本矛盾发展的结果。只有用社会主义生产方式取而代之，才能根本解决资本主义生产方式的基本矛盾。</li>
<li><strong>第二，资本积累推动资本主义基本矛盾不断激化并最终否定资本主义自身。</strong>从资本积累过程来看，资本主义基本矛盾在资本积累过程中不断发展。如果说资本主义的原始积累使资本主义生产方式得以形成，那么，资本的不断积累则为否定资本主义制度自身准备了物质条件。</li>
<li><strong>第三，国家垄断资本主义是资本社会化的更高形式，将成为社会主义的前奏。</strong>资本的社会化是在资本主义社会的生产力和生产关系的矛盾运动中发展的。随着国家垄断资本主义 的发展和资本主义自身的政策调整，资本主义国家中出现了某些新的现象， 表明在资本主义社会中孕育着某些社会主义的因素。</li>
<li><strong>第四，资本主义社会存在着资产阶级和无产阶级两大阶级之间的矛盾和斗争。</strong>随着资本主义经济的发展，资产阶级由生产力的解放者日益变成阻碍者，资本主义在造就了社会化大生产的同时，也产生了推动和运用这 一先进生产力的无产阶级。无产阶级是现代大工业的产物，是真正革命的阶级，无产阶级政党是无产阶级利益的代表。资产阶级的灭亡和无产阶级的胜利是同样不可避免的。</li>
</ul>
<p>当今世界，虽然资本主义制度通过自我调节还能为生产力的发展提供 一定的空间，但社会主义取代资本主义是历史的必然趋势。</p>
</blockquote>
</blockquote>
<h3 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h3><blockquote>
<h4 id="P281-283-正确把握科学社会主义基本原则"><a href="#P281-283-正确把握科学社会主义基本原则" class="headerlink" title="P281-283 正确把握科学社会主义基本原则"></a>P281-283 正确把握科学社会主义基本原则</h4><p><strong>第一，必须始终坚持科学社会主义基本原则，反对任何背离科学社会主义基本原则的错误倾向。</strong>科学社会主义基本原则揭示了资本主义生产方式的基本矛盾，阐明了社会主义代替资本主义的历史必然性，为社会主义事业的发展指明了方向 必须始终不渝地坚持科学社会主义基本原则，不 能因为遇到一时的困难和挑战而放弃这些原则，否则就是背离了社会主 义运动的目的和无产阶级政党的宗旨，就会走向邪路。</p>
<p><strong>第二，要善于把科学社会主义基本原则与本国实际相结合，创造性地回答和解决社会主义革命、建设、改革中的重大问题。</strong>共产党人必须将科学社会主义基本原则运用于社会主义革命、建设、改革的实践，发挥这些原则指导实践的巨大威力也只有在理论与实践相结合的过程中，我们才能真正认识和把握社会主义的真谛而在运用科学社会主义基本原则的过程中，必须正确认识和处理原则的一般性与具体实际的特殊性之间的辩证关系。只有将科学社会主义基本原则与本国国情相结合，才能创造性地回答和解决本国实际问题。</p>
<p><strong>第三，紧跟时代和实践的发展，在不断总结新鲜经验中进一步丰富和发展科学社会主义基本原则。</strong>理论来源于实践，又随着实践的发展而发展科学社会主义基本原则不是一成不变的教条，而是随着社会主义实践而不断丰富和发展的学说。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/14/Dev%20C++%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="Dev-C-安装">Dev C++ 安装</h2>
<p>Dev C++ 是一款非常好用，简约的C/C++开发工具。可以减少很多创建工程的繁琐步骤，很快的进行开发。对于只用于来写代码的人来说，是比较轻量以及极速的。</p>
<p>Dev C++ 是一个windows下的c和c++程序的集成开发环境。它使用mingw32/gcc编译器，遵循c/c++标准。开发环境包括多页面窗口、工程编辑器以及调试器等，在工程编辑器中集合了编辑器、编译器、连接程序和执行程序，提供高亮度语法显示的，以减少编辑错误，还有完善的调试功能，能够适合初学者与编程高手的不同需求，<strong>是学习c或c++的首选开发工具！</strong></p>
<h3 id="一-下载">一.下载</h3>
<p><a class="link"   href="http://crxzc.198424.com/dev-cpp_5.11_setup.zip" >点击下载<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="二-安装">二.安装</h3>
<p>使用Windows自带的解压缩工具进行解压，解压之后找到.exe后缀的安装包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.328888.xyz/2023/04/14/ix6taF.png"
                      alt=""
                ></p>
<p>双击，出现此点击是即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.328888.xyz/2023/04/14/ix6giz.jpeg"
                      alt=""
                ></p>
<p>选择English，注：如果有中文简体依需求定</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.328888.xyz/2023/04/14/ix69QZ.png"
                      alt=""
                ></p>
<p>直接都不用管，下一步：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.328888.xyz/2023/04/14/ix6TUE.png"
                      alt=""
                ></p>
<p>选择一个非C盘的合适的位置：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.328888.xyz/2023/04/14/ix6aRC.png"
                      alt=""
                ></p>
<p>安装完成</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.328888.xyz/2023/04/14/ix6YVX.png"
                      alt=""
                ></p>
<h3 id="三-使用">三.使用</h3>
<p>第一次打开Dev C++，选择语言：简体中文。字体和配色等全部默认就行。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.328888.xyz/2023/04/14/ixFZQc.png"
                      alt=""
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.328888.xyz/2023/04/14/ixFfgo.png"
                      alt=""
                ></p>
<p>在&lt;文件&gt; - 新建 - 源代码 直接新建一个C项目，或者直接快捷键Ctrl+N</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.328888.xyz/2023/04/14/ixFkFw.png"
                      alt=""
                ></p>
<p>然后，写入我们的第一行代码：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.328888.xyz/2023/04/14/ixFllx.png"
                      alt=""
                ></p>
<p>然后点击我们第三个按钮，编译并运行，或者快捷键F10(机器不同快捷键会有区别)</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.328888.xyz/2023/04/14/ixFbcU.png"
                      alt=""
                ></p>
<p>出现黑色弹窗即为成功：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.328888.xyz/2023/04/14/ixFrF5.png"
                      alt=""
                ></p>
<h3 id="四-结语">四.结语</h3>
<p>预祝各位都能转到心仪的专业。</p>
<p>转计算机详细攻略看我往期文章。</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/05/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Run-server">Run server</h3>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>
<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>
<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>
<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>HexoBlog 的诞生（一）</title>
    <url>/2022/05/30/HexoBlog%20%E7%9A%84%E8%AF%9E%E7%94%9F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>本文记录和讲解一下我的 HexoBlog 是如何被一步一步被部署至 Github Pages 上的，可供大家参考。部署完成后可参考我的下一篇文章<a class="link"   href="https://ldyllic.github.io/2021/09/25/HexoBlog-%E7%9A%84%E8%AF%9E%E7%94%9F%EF%BC%88%E4%BA%8C%EF%BC%89/" >HexoBlog 的诞生（二）<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>对自己的 HexoBlog 进行个性化设置和配置，不过在此之前，需阅读<a class="link"   href="https://hexo.io/zh-cn/docs/" > Hexo 官方文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，对 Hexo 有基本的完整的认识。</p>
<h2 id="注册自己的-Github-账户，创建-Github-Pages">注册自己的 Github 账户，创建 Github Pages</h2>
<ol>
<li>进入<a class="link"   href="http://github.com/" > Github 首页<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，点击 Sign up 注册，填写 Username 等，验证邮箱，注册成功；</li>
<li>点击右上角的加号，点击 New repository，填写 Repository name，这里的仓库名建议按照”&lt;自己的 Github 用户名&gt;.github.io“的格式来填，填写 Description，点击 Creat repository，创建 Github Pages 成功；</li>
</ol>
<h2 id="安装-Node-js，安装-Git-和-Git-的配置">安装 Node.js，安装 Git 和 Git 的配置</h2>
<ol>
<li>进入<a class="link"   href="https://nodejs.org/zh-cn/" > Node.js 官方网站<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，点击下载 LTX（Long Term Support）版，安装步骤非常简单，一直 next，可以安装在其他盘符；</li>
<li>进入<a class="link"   href="https://git-scm.com/downloads" > Git 官方网站下载页面<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，选择 Windows 版本的 Git 下载，由于Git服务器在国外，所以国内很慢，在这奉上国内镜像下载地址<a class="link"   href="https://npm.taobao.org/mirrors/git-for-windows/" >Git镜像<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，一直 next，可以安装在其他盘符；</li>
<li>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.bmp.ovh/imgs/2021/09/82bc547e55e5cafe.png"
                      alt=""
                ></li>
</ol>
<h2 id="连接Github">连接Github</h2>
<p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure></div>
<p><strong>创建 SSH 密匙</strong>：</p>
<p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p>
<p><strong>添加密匙：</strong></p>
<p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>
<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>
<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>
<p><strong>验证连接：</strong></p>
<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>
<h2 id="安装-Hexo">安装 Hexo</h2>
<ol>
<li>
<p>在合适的路径下新建一个文件夹，文件夹名自定义，例如 HexoBlog，作为&lt;存储 HexoBlog 的文件夹&gt;；</p>
</li>
<li>
<p>打开&lt;存储 HexoBlog 的文件夹&gt;，在空白处点鼠标的右键，选择 Git Bash Here 进入终端；</p>
</li>
<li>
<p>使用 npm 一键安装 Hexo 博客程序：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></div>
<p>Mac 用户需要管理员权限（sudo），运行这条命令：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>初始化并安装所需组件：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init      <span class="comment"># 初始化</span></span><br><span class="line">$ npm install    <span class="comment"># 安装组件</span></span><br></pre></td></tr></table></figure></div>
<p>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g   <span class="comment"># 生成页面</span></span><br><span class="line">$ hexo s   <span class="comment"># 启动预览</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p>
</li>
</ol>
<p>可在&lt;存储 HexoBlog 的文件夹&gt;中看到生成了如下图所示的文件。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.bmp.ovh/imgs/2021/09/55adb6d0c87ef906.png"
                      alt=""
                ></p>
<h2 id="部署-Hexo-到-GitHub-Pages">部署 Hexo 到 GitHub Pages</h2>
<p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>
<p>首先<strong>安装 hexo-deployer-git</strong>：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>
<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 本行为&lt;存储 HexoBlog 的文件夹&gt;\_config.yml 的第 97 行（随着 Hexo 的不断更新，本行对应在你的 _config.yml 中不一定是第 97 行，请以实际情况为准）</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master        </span><br></pre></td></tr></table></figure></div>
<p>完成后运行</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g   <span class="comment"># 生成页面</span></span><br><span class="line">$ hexo d   <span class="comment"># 上传页面</span></span><br></pre></td></tr></table></figure></div>
<p>将网站上传部署到 GitHub Pages。</p>
<p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>
]]></content>
  </entry>
  <entry>
    <title>HexoBlog 的诞生（二）</title>
    <url>/2022/05/30/HexoBlog-%E7%9A%84%E8%AF%9E%E7%94%9F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>本文记录和讲解一下我的 HexoBlog 是如何个性化设置和配置的，可供大家参考，我会持续更新。</p>
<h2 id="重要提示">重要提示</h2>
<p>个性化设置和配置了一处自己的 HexoBlog，可以通过本地部署的方式（即在&lt;存储 HexoBlog 的文件夹&gt;下进入终端，输入<code>hexo s</code>）查看相应效果，甚至可以直接修改一处，刷新一下查看效果，等都设置和配置完毕了再部署到 Github Pages 中，即在&lt;存储 HexoBlog 的文件夹&gt;下进入终端，执行<code>hexo clean &amp;&amp; hexo g -d</code></p>
<h2 id="Hexo-的个性化设置和配置">Hexo 的个性化设置和配置</h2>
<h3 id="配置博客站点基本信息">配置博客站点基本信息</h3>
<p>编辑 Hexo 的配置文件，个性化配置自己的站点信息即可：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本行为&lt;存储HexoBlog的文件夹&gt;\_config.yml的第4行（随着Hexo的不断更新，本行对应在你的_config.yml中不一定是第4行，请以实际情况为准）</span></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line">-title: Hexo</span><br><span class="line">-subtitle: <span class="string">&#x27;&#x27;</span></span><br><span class="line">-description: <span class="string">&#x27;&#x27;</span></span><br><span class="line">-keywords:</span><br><span class="line">-author: John Doe</span><br><span class="line">-language: en</span><br><span class="line">-timezone: <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本行为&lt;存储HexoBlog的文件夹&gt;\_config.yml的第4行（随着Hexo的不断更新，本行对应在你的_config.yml中不一定是第4行，请以实际情况为准）</span></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line">+title: ning<span class="string">&#x27;s HexoBlog</span></span><br><span class="line"><span class="string">+subtitle: It&#x27;</span>s a beautiful day!</span><br><span class="line">+description: 学习与生活</span><br><span class="line">+keywords: 学习与生活</span><br><span class="line">+author: 宁宁</span><br><span class="line">+language: zh-CN</span><br><span class="line">+timezone: </span><br></pre></td></tr></table></figure></div>
<h3 id="下载和设置Hexo主题">下载和设置Hexo主题</h3>
<p>进入<a class="link"   href="https://hexo.io/themes/" >Hexo主题官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>挑选合适且自己喜欢的主题，根据主题配置文档说明进行配置，推荐使用npm安装</p>
<h2 id="使用-Typora-编辑-Markdown-文件，书写博客文章">使用 Typora 编辑 Markdown 文件，书写博客文章</h2>
<p>通过执行<code>hexo new post &lt;自定义 md 文件名&gt;</code>，相应 Markdown 文件将在 _posts 下生成，那么该如何编辑这种 Markdown 文件，书写自己的博客文章呢？</p>
<p>由于Hexo是将本地md文件上传至网页中展现，所以我们博客的内容全部需要使用md文件。</p>
<h3 id="Markdown">Markdown</h3>
<p>Markdown 是一种轻量级的标记语言，类似于 HTML，但 Markdown 的语法十分简单，常用的标记符号也不超过十个。</p>
<h3 id="Typora">Typora</h3>
<p>Typora 是一个 Markdown 文件阅读器与编辑器，支持 MacOS、Windows、Linux 平台，可到<a class="link"   href="https://typora.io/" > Typora 官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>下载。</p>
<p>基础语法操作不作赘述。</p>
<h4 id="如何在文章中插入图片、视频和音乐？">如何在文章中插入图片、视频和音乐？</h4>
<h5 id="开启每篇文章的资源文件夹">开启每篇文章的资源文件夹</h5>
<p>打开 Hexo 的配置文件，关键字 post_asset_folder 查找，将 post_asset_folder 的值改为 true。每次新生成 layout（layout 默认有 post、page 和 draft 三种 ）时都会在对应生成的 Markdown 文件同级目录下生成一个对应的资源文件夹，可将图片、音乐或视频存入该文件夹，这样，想插入图片、音乐或视频时直接填写图片、音乐或视频的完整文件名即可。</p>
<h5 id="在文章内插入视频">在文章内插入视频</h5>
<p>在[存储 HexoBlog 的文件夹]下进入终端，输入如下命令安装 hexo-tag-dplayer。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save hexo-tag-dplayer</span><br></pre></td></tr></table></figure></div>
<p>至此，基本的博客搭建操作已结束。</p>
]]></content>
  </entry>
  <entry>
    <title>技术</title>
    <url>/2022/06/27/%E8%BD%AC%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%A6%E7%BB%86%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<h2 id="转计算机详细攻略"><a href="#转计算机详细攻略" class="headerlink" title="转计算机详细攻略"></a>转计算机详细攻略</h2><h3 id="P0-最近很多新生比较关注转专业的问题，尤其是转计算机学院的专业，于是笔者制作了本攻略-答疑"><a href="#P0-最近很多新生比较关注转专业的问题，尤其是转计算机学院的专业，于是笔者制作了本攻略-答疑" class="headerlink" title="P0 最近很多新生比较关注转专业的问题，尤其是转计算机学院的专业，于是笔者制作了本攻略(答疑)"></a>P0 最近很多新生比较关注转专业的问题，尤其是转计算机学院的专业，于是笔者制作了本攻略(答疑)</h3><h3 id="P1-转计算机条件"><a href="#P1-转计算机条件" class="headerlink" title="P1 转计算机条件"></a>P1 转计算机条件</h3><blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i-s2.328888.xyz/2022/06/27/62b93b9f007ec.png"
                      alt="image-20220627131044274"
                ></p>
<p>(摘自《天津理工大学本科生转专业实施细则》)</p>
<p>可以看到天理对于转专业是非常宽松的，没有绩点排名限制，人人均可报名转专业。</p>
<p>(注：特殊类如艺术，海运，中外合作无法转至普通专业就读)</p>
</blockquote>
<h3 id="P2-转计算机流程"><a href="#P2-转计算机流程" class="headerlink" title="P2 转计算机流程"></a>P2 转计算机流程</h3><blockquote>
<p>每年上半年，也就是第二学期学校会发布专业报名的公告及相关附件，大一大二下载附件并填写申请表即算报名成功。等待信息门户(入学后自会知晓)公布考试时间及地点即可。</p>
<p>参加转专业初试考核，考核通过会公布复试名单，通过复试即算成功。</p>
</blockquote>
<h3 id="P3-转计算机考试科目"><a href="#P3-转计算机考试科目" class="headerlink" title="P3 转计算机考试科目"></a>P3 转计算机考试科目</h3><blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i-s2.328888.xyz/2022/06/27/62b93dfb2db09.png"
                      alt="image-20220627132011358"
                ></p>
<p>(摘自《2021-2022学年第二学期拟接收转专业名额及考核情况汇总表》)</p>
<p>可以看到计院的四个普通专业对转专业的要求是一模一样的，都是考核<strong>高级语言程序设计I，高等数学A，大学英语(初级)</strong></p>
<p>注：高级语言程序设计I是C语言上机题</p>
</blockquote>
<h3 id="P4-转计算机科目具体内容"><a href="#P4-转计算机科目具体内容" class="headerlink" title="P4 转计算机科目具体内容"></a>P4 转计算机科目具体内容</h3><blockquote>
<p>高等数学A，大学英语(初级)是全学校工科专业的通识课，你在任何一个工科专业都将学习这两门课，并且是全校<strong>统一教学，统一考试</strong>，那么就不多做赘述了。</p>
<p>高级语言程序设计I是C语言，转计算机考核方式为三道编程题，任意写出一道60分，两道80分，三道100分；而在转计算机要求中，你只需要写出两道题就通过初试考核。那么大概是什么水平呢？你需要基本掌握字符串操作、指针的用法、函数的用法、结构体的基本用法以及部分经典算法(eg：快速排序算法、二分查找等)</p>
<ul>
<li>前两道题就是普通的算法编程题，认真学过C语言的写出前两道题问题不大</li>
<li>第三道题就上难度了，往年是结构体+指针+算法的考察方式，22年转计算机第三题是《C和指针》上的题目，纯考核字符串以及指针的操作，难度对初学者很不友好</li>
</ul>
<p>(注：每年有大量炮灰C语言0分)</p>
</blockquote>
<h3 id="p5-综述"><a href="#p5-综述" class="headerlink" title="p5 综述"></a>p5 综述</h3><blockquote>
<ul>
<li><p>转计算机人人都能报名但是难度也是有的，这个无需赘述吧；</p>
</li>
<li><p>三门考核均不能懈怠，没有孰轻孰重；</p>
</li>
<li><p>建议读相近的工科专业(学校很多工科专业也会开设C语言课程)，这样你只需要把C语言再精进一点即可，压力会小很多。</p>
</li>
</ul>
<p>(注：一定不能只说不做，每年那些0分就是例子)</p>
</blockquote>
]]></content>
  </entry>
</search>
